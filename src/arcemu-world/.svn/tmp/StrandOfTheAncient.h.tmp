/*
 * Servidor ArcEmu MMORPG
 *
 * Copyright (C) 2011 <http://www.ArcEmu.es/> 
 *
 * Este programa es software libre: usted puede redistribuirlo y modificarlo
 * Bajo los términos de la licencia GNU Affero General Public License publicada por
 * La Fundacion del Software gratuito, ya sea la versión 3 de la Licencia, o
 * Cualquier versión posterior.
 *
 * Este programa se distribuye con la esperanza de que sea útil, 
 * Pero SIN NINGUNA GARANTÍA, incluso sin la garantía implícita de
 * O IDONEIDAD PARA UN PROPÓSITO PARTICULAR. Ver el 
 * GNU Affero General Public License para más detalles.
 *
 * Usted debe haber recibido una copia de la licencia GNU Affero General licencia publica
 * Junto con este programa. Si no es así, consulte <http://www.gnu.org/licenses/>. 
 *
 */

#define BUFF_COUNT		3

#define TEAM_DEFENDER	0
#define TEAM_ATTACKER	1
#define GUN_LEFT		0
#define GUN_RIGHT		1

#define ROUND_LENGTH 600 //in secs

// Is this number importing or just an ID?
#define EVENT_SOTA_TIMER 0x57283dd

enum Gate
{
    GATE_GREEN	= 0,
    GATE_YELLOW = 1,
    GATE_BLUE	= 2,
    GATE_RED	= 3,
    GATE_PURPLE	= 4,
    GATE_COUNT	= 5,
};

class StrandOfTheAncient : public CBattleground
{
	private:
		//Transporter * m_boats[2];
		//TransportPath path;
		uint32 Attackers; // 0 - horde / 1 - alliance
		uint32 BattleRound;
		uint32 RoundTime;
		GameObject* m_boats[4];
		GameObject* m_buffs[BUFF_COUNT];
		GameObject* m_relic;
		GameObject* m_endgate;
		GameObject* m_gates[GATE_COUNT];
		GameObject* m_gateSigils[GATE_COUNT];
		GameObject* m_gateTransporters[GATE_COUNT];
		list<Player*> sota_players;
		PassengerMap boat1Crew;
		PassengerMap boat2Crew;

	public:
		static CBattleground* Create(MapMgr* m, uint32 i, uint32 l, uint32 t) { return new StrandOfTheAncient(m, i, l, t); }

		StrandOfTheAncient(MapMgr* mgr, uint32 id, uint32 lgroup, uint32 t);
		~StrandOfTheAncient();

		uint32 GetNameID() { return 34; } // in worldstring_tables

		uint32 GetRoundTime() { return RoundTime; };
		LocationVector GetStartingCoords(uint32 team);
		void HookOnAreaTrigger(Player* plr, uint32 id);
		void HookFlagStand(Player* plr, GameObject* obj);
		void HookOnFlagDrop(Player* plr);
		void HookFlagDrop(Player* plr, GameObject* obj);
		void HookOnPlayerKill(Player* plr, Player* pVictim);
		void HookOnHK(Player* plr);
		void HookOnShadowSight();
		void HookGenerateLoot(Player* plr, Object* pOCorpse);
		void HookOnUnitKill(Player* plr, Unit* pVictim);
		bool HookSlowLockOpen(GameObject* pGo, Player* pPlayer, Spell* pSpell);
		void HookOnPlayerDeath(Player* plr);
		void HookOnMount(Player* plr);
		bool HookHandleRepop(Player* plr);
		void OnAddPlayer(Player* plr);
		void OnRemovePlayer(Player* plr);
		void OnPlatformTeleport(Player* plr);
		void OnCreate();
		void OnStart();
		void SetIsWeekend(bool isweekend);
		void SetRoundTime(uint32 secs) { RoundTime = secs; };
		void SetTime(uint32 secs, uint32 WorldState);
		void TimeTick();
		void PrepareRound();

	protected:
		uint32 m_flagHolders[2];

		void SpawnBuff(uint32 x);

};
